{{- $chartName := include "mapproxy.name" . -}}
{{- $serviceName := include "service.fullname" . -}}
{{- $releaseName := .Release.Name -}}

{{- $path := "/" }}
{{- if .Values.nginx.ingress.enabled }}
{{- $path = .Values.nginx.ingress.path }}
{{- end }}
{{- if .Values.nginx.route.enabled }}
{{- with (index .Values.nginx.route.routesMapping 0) }}
{{- $path = .path }}
{{- end }}
{{- end }}

{{- if and (and (not .Values.nginx.ingress.enabled) (not .Values.nginx.route.enabled)) (eq (lower .Values.global.cloudProvider.flavor) "openshift") }}
{{- fail "Route or Ingress should be enabled when deploying to Openshift" }}
{{- end }}

# Define upstreams for WMS and WMTS respectively
upstream mapproxy {
    server {{ $serviceName }}:{{ .Values.mapproxy.uwsgi.socket }};
}

{{- if .Values.nginx.cache.enabled }}
uwsgi_cache_path {{ .Values.nginx.cache.cachePath }} levels={{ .Values.nginx.cache.levels }}
keys_zone={{ .Values.nginx.cache.keysZone }}:{{ .Values.nginx.cache.keysZoneSize }}
max_size={{ .Values.nginx.cache.maxSize }} inactive={{ .Values.nginx.cache.inactive }} use_temp_path={{ .Values.nginx.cache.useTempPath }};
{{- end }}


server {
    listen      {{ .Values.nginx.nginxTargetPort }};
    # the domain name it will serve for
    server_name mapproxy;
    # max upload size, adjust to taste
    keepalive_timeout  500;
    proxy_connect_timeout       600;
    proxy_send_timeout          600;
    send_timeout                600;
    client_max_body_size        5000;
    client_header_timeout       600;
    client_body_timeout         600;
    client_header_buffer_size   12288; # 12K
    large_client_header_buffers 4 12288; # 12K
    fastcgi_read_timeout        300;
    uwsgi_read_timeout {{ .Values.mapproxy.uwsgi.timeoutSeconds }};
    uwsgi_send_timeout {{ .Values.mapproxy.uwsgi.timeoutSeconds }};
    uwsgi_connect_timeout {{ .Values.mapproxy.uwsgi.timeoutSeconds }};
    location /liveness {
        access_log    off;
        log_not_found off;
        return 200 "I'm alive\n";
    }

    # Handle all requests to /service and redirect according to wanted service type if provided
    location {{ $path }}/service {
        include uwsgi_params;
        if ($args ~* 'service=wmts') {
            rewrite ^ {{ $path }}/service/wmts last;
        }
        if ($args ~* 'service=wms') {
            rewrite ^ {{ $path }}/service/wms last;
        }
        include nginx.mapproxy.conf;
        uwsgi_pass mapproxy;
    }

    # Handle WMTS RESTfull requests
    location {{ $path }}/wmts {
        set $original_method $request_method;
        set $original_args $args;
        include uwsgi_params;
        include nginx.mapproxy.conf;
        include nginx.mapproxy.wmts.conf;
        uwsgi_pass mapproxy;
    }

    # Catch all requests that do not apply to other specific paths
    location {{ $path }} {
        set $original_method $request_method;
        set $original_args $args;
        include nginx.mapproxy.conf;
        include uwsgi_params;
        uwsgi_pass mapproxy;
    }
}
