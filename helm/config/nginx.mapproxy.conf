gzip on;
gzip_types text/plain application/json application/xml text/xml;
uwsgi_param HTTP_Host $http_host;
{{- with (index .Values.nginx.route.routesMapping 0) }}
uwsgi_param HTTP_X_SCRIPT_NAME {{ .path }};
{{- end }}
uwsgi_hide_header    Set-Cookie;  # ensures the header will not be passed back to the client
uwsgi_param HTTP_Cookie ""; # ensures that a client cannot pass any prior cookies to the webapp and spoil your cache
{{- if .Values.nginx.cache.enabled }}
uwsgi_cache_key "$host$request_uri";
uwsgi_cache {{ .Values.nginx.cache.keysZone }};
uwsgi_cache_valid 200 {{ .Values.nginx.cache.expirationTime }}; # will cache only valid 200 status code responses
uwsgi_cache_valid any 0; # will disable caching all not 200 status code responses
uwsgi_cache_background_update on; # Allows starting a background subrequest to update an expired cache item, while a stale cached response is returned to the client.
uwsgi_cache_use_stale error timeout updating http_500 http_503; # return tile from cache in case of server down 
uwsgi_cache_revalidate on; # Enables revalidation of expired cache items
uwsgi_cache_lock on; # minimize the number of accesses to proxied servers when populating a new cache element
uwsgi_cache_min_uses 3; # Sets the number of requests after which the response will be cached
set $no_cache "";
if ($request_uri ~* \.xml) { # support blocking restful format request of capabilities
    set $no_cache "1";
}
if ($arg_request = "GetCapabilities") { # support blocking kvp format request of capabilities
    set $no_cache "1";
}
uwsgi_no_cache $no_cache;
uwsgi_cache_bypass $no_cache;
{{- end }}