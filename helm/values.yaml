global:
  environment: ""
  storage:
    tilesStorageProvider: ""
    mapproxyConfigProvider: ""
    fs:
      internalPvc:
        enabled: false
        name: ""
        tilesSubPath: ""
    s3:
      endpointUrl: ""
      tilesBucket: ""
      sslEnabled: false
      secretName: ""
  ca:
    secretName: "root-ca"
    path: "/usr/local/share/ca-certificates"
    key: "ca.crt"
  gracefulReloadMaxSeconds: 300
  cloudProvider:
    dockerRegistryUrl: <YOUR_REGISTRY>
    imagePullSecretName: <YOUR_PULL_SECRET>
    flavor: openshift

authentication:
  ssl:
    enabled: false
    useExternal: false
    externalSecretName: ""

storage:
  tilesStorageProvider: ""
  mapproxyConfigProvider: ""
  fs:
    internalPvc:
      enabled: false
      name: ""
      tilesSubPath: ""
  s3:
    endpointUrl: ""
    tilesBucket: ""
    sslEnabled: false
    secretName: ""

# add pod annotations
# example:
# podAnnotations:
# annotation1: annotation-value-1
# annotation2: annotation-value-2
podAnnotations: {}

environment: development
initialDelaySeconds: 60
splunkIndex: ""
resetOnConfigChange: true
imagePullPolicy: IfNotPresent

cloudProvider:
  flavor: openshift

mapproxy:
  enabled: true
  socket:
    connectionTimeoutSeconds: 0.1 # Set a connection timeout, nonnegative floating point number expressing *seconds*.
    timeoutSeconds: 0.1 # Set a operation timeout nonnegative, floating point number expressing *seconds*.
  redis:
    tls: false
  replicaCount: 1
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
  nodePort: 30002
  image:
    dockerRegistryUrl: <YOUR_MAPPROXY_REGISTRY>
    imagePullSecretName: <YOUR_MAPPROXY_PULL_SECRET>
    repository: <YOUR_REPOSITORY>
    tag: <YOUR_TAG>
  db:
    nameOverride:
    schema: MapproxyConfig
  port: 80
  targetPort: 8080
  uwsgi:
    socket: 3031
    httpSocket: 8080
    processes: 6
    threads: 10
    disableLogging: true
    timeoutSeconds: 8
    statsServer:
      stats: 1717
      statsMinify: true

  env:
    cors:
      enabled: true
      allowedOrigin: "*"
      allowedHeaders: "*"
    ssl: # external paths
      CA_DIR: /opt/certs/ca/
      KEY_DIR: /opt/certs/key/
      CERT_DIR: /opt/certs/cert/
      CA_FILE_LOCATION: /opt/certs/ca/ca.pem
      KEY_FILE_LOCATION: /opt/certs/key/key.pem
      CERT_FILE_LOCATION: /opt/certs/cert/cert.pem
    openApiFilePath: ./openapi3.yaml
    requestsLogLevel: WARNING
    logLevel: WARNING
    logPrettyPrintEnabled: false
    responseCompressionEnabled: true
    requestPayloadLimit: 1mb

nginx:
  enabled: true
  fullnameOverride: ""
  replicaCount: 1
  image:
    dockerRegistryUrl: nginxinc
    imagePullSecretName: ""
    repository: nginx-unprivileged
    tag: 1.28.0-alpine3.21-otel
  volume:
    storage: 1000Mi
    accessModes: ReadWriteOnce
  cache:
    enabled: true
    cachePath: /cache
    levels: "1:2" # levels sets up a twoâ€‘level directory hierarchy under
    keysZone: mapproxy_cache
    keysZoneSize: 10m # 10m is about 80,000 keys
    maxSize: 900m # physical memory
    inactive: 60m
    expirationTime: 60m
    useTempPath: "off"

  port: 8080
  statusPort: 8081
  internalServicePort: 80
  nginxTargetPort: 8080
  targetPort: 8080
  nodePort: 30003

  extraVolumes:
    - name: nginx-config
      configMap:
        name: "{{ .Release.Name }}-{{ .Chart.Name }}-nginx-configmap"
    - name: cache #TODO: Find solution to mount cache volume with condition
      emptyDir:
        sizeLimit: "{{ .Values.nginx.volume.storage }}"
        medium: "Memory"

  extraVolumeMounts:
    - name: nginx-config
      mountPath: "/etc/nginx/conf.d/default.conf"
      subPath: default.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.conf"
      subPath: nginx.conf
    - name: nginx-config
      mountPath: "/etc/nginx/log_format.conf"
      subPath: log_format.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.mapproxy.conf"
      subPath: nginx.mapproxy.conf
    - name: nginx-config
      mountPath: "/etc/nginx/nginx.mapproxy.wmts.conf"
      subPath: nginx.mapproxy.wmts.conf
    - name: cache
      mountPath: "/cache"

  route:
    enabled: true
    routesMapping:
      - host:
        path: /api
    timeout:
      enabled: false # defaults to 30s by openshift
      duration: 60s # supported units (us, ms, s, m, h, d)
    rewriteTarget: ""
    tls:
      enabled: true
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
      useCerts: false
      certificate: ""
      key: ""
      caCertificate: ""

  ingress:
    enabled: false
    type: "nginx-org" # supported values: 'nginx-org' | 'nginx-kubernetes'
    path: /api
    host: "localhost"
    tls:
      enabled: true
      useExternal: ""

  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

uwsgiExporter:
  image:
    repository: "timonwong/uwsgi-exporter"
    tag: "latest"
  env:
    logLevel: info # one of [debug, info, warn, error]
  port: 9117
  resources:
    enabled: true
    value:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi
